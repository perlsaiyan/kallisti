#class {hk} {kill}
#class {hk} {open}

#nop ------------------------------------------
#nop -- Variables
#nop ------------------------------------------

#list {hms} {create} {HEALTH;MANA;STAMINA}
#var hkResumeInterval 30

#nop ------------------------------------------
#nop -- Events
#nop ------------------------------------------

event_register {mob_kill} {checkLevels} {checkLevelsLow}

#nop ------------------------------------------
#nop -- Macros
#nop ------------------------------------------

#nop -- stops hunt loop

#nop ------------------------------------------
#nop -- Helpful aliases
#nop ------------------------------------------

#tab hkKill
#alias {hkKill} {
    #untick {checkLevelsHigh};
    #untick {hk resume};
    #local _nextguy $target;
    _cleanupHK;
    #class hk kill;
    event_raise {ehk complete} $_nextguy;
}

#alias {lostTracks} {
	#var {huntFailCount} {0};
	checkLevelsLow;
	hkKill
}

#alias {_cleanupHK} {
	#var {target} {};
	#var {nextTarget} {};
	#var {areaName} {};
	#var {target} {};
	#var {huntFailCount} {0}
}

#nop -- Set opening attack, can be included in character's class file

#nop -- Regen mode can be included in each character's class file as well

#tab setRegenMode
#alias {setRegenMode} {
	#var {regenMode} {%1}
}

#alias {doRegen} {
    #untick {hk resume};
    dismount $mount;
    tether $mount;
    sleep;
	#var {regen} {1};
	#ticker {checkLevelsHigh} {checkLevelsHigh} {5}
}

#alias {doWake} {
	wake;
	stand;
    mount $mount;
	$openingAttack $nextTarget;
    #var regen 0;
	look;
	#untick {checkLevelsHigh}
}


#nop -- Set thresholds for regen - top and bottom. Lower defaults to 30, upper to 90 with no argument, in the order HMS

#tab {upperThresholds}
#alias {upperThresholds} {
	#if {"%1"==""} {
		#var {HEALTH_thresholdUp} {90}} {
		#var {HEALTH_thresholdUp} {%1}};
	#if {"%2"==""} {
		#var {MANA_thresholdUp} {90}} {
		#var {MANA_thresholdUp} {%2}};
	#if {"%3"==""} {
		#var {STAMINA_thresholdUp} {90}} {
		#var {STAMINA_thresholdUp} {%3}};
	#echo {<ffa>Upper thresholds set to $HEALTH_thresholdUp H $MANA_thresholdUp M $STAMINA_thresholdUp S}
}

#tab {lowThresholds}
#alias {lowThresholds} {
	#if {"%1"==""} {
		#var {HEALTH_thresholdLow} {30}} {
		#var {HEALTH_thresholdLow} {%1}};
	#if {"%2"==""} {
		#var {MANA_thresholdLow} {30}} {
		#var {MANA_thresholdLow} {%2}};
	#if {"%3"==""} {
		#var {STAMINA_thresholdLow} {30}} {
		#var {STAMINA_thresholdLow} {%3}};
	#echo {<ffa>Bottom thresholds set to $HEALTH_thresholdLow H $MANA_thresholdLow M $STAMINA_thresholdLow S}
}

#nop ------------------------------------------
#nop -- Checking and reporting thresholds
#nop ------------------------------------------

#nop -- do wake if we've regenned sufficiently

#alias {checkLevelsHigh} {diaLog azone checking levels HIGH;
	#if {@percent{MSDP_HEALTH}>$HEALTH_thresholdUp && @percent{MSDP_MANA}>$MANA_thresholdUp && @percent{MSDP_STAMINA}>$STAMINA_thresholdUp} {
		doWake}
}

#nop -- do regen if our hms is too low

#alias {checkLevelsLow} {diaLog azone Checking Levels LOW;
	#nop %0;
	#if {@percent{MSDP_HEALTH}>$HEALTH_thresholdLow && @percent{MSDP_MANA}>$MANA_thresholdLow && @percent{MSDP_STAMINA}>$STAMINA_thresholdLow} {
	    diaLog azone Set up resumeHK;
        #if {$MSDP_OPPONENT_NUMBER > 0} {
		    #delay {resumeHK} {#if {$MSDP_OPPONENT_NUMBER==0} {$openingAttack $nextTarget}} {2};
		   } {
            $openingAttack $nextTarget
            };
        } {
		#delay {resumeRegen} {#if {$MSDP_OPPONENT_NUMBER==0} {doRegen}} {2};
		}
	}

#tab thresholdReport
#alias {thresholdReport} {
	#echo {<ffa>Bottom thresholds set to ${HEALTH_thresholdLow}H ${MANA_thresholdLow}M ${STAMINA_thresholdLow}S};
	#echo {<ffa>Upper thresholds set to ${HEALTH_thresholdUp}H ${MANA_thresholdUp}M ${STAMINA_thresholdUp}S}
}


#nop ------------------------------------------
#nop -- Hunting and killing aliases
#nop ------------------------------------------

#alias {hk} {
	#var {target} {%1};
	#var {hk} {1};
	#var {nextTarget} {%1};
    #var regen 0;
    #line oneshot #tick {hk resume} {hk %1} {$hkResumeInterval};
	hunt %1;
}

#nop ------------------------------------------
#nop -- Actions
#nop ------------------------------------------

#action {^[* You see your target's tracks leading %1. *]} {
	#if {$hk==1} {%1}
} {5}

#action {^[* You found your target! *]} {
	#if {$hk==1} {
		$openingAttack $target;
		#var target $nextTarget;
		#var hk 0;
		#var huntFailCount 0}
}

#action {^[* You fail to find the tracks. *]} {
	#math {huntFailCount} {$huntFailCount+1};
	#if {$huntFailCount>5} {hkKill} {
	checkLevelsLow}
}

#action {%1 is dead!  R.I.P.} {
	event_raise {mob_kill} {checkLevels} 
}

#action {No target found by the name of '%1.'} {
	hk $nextTarget
}
#action {Nobody here by that name ('%1').} {
    hk $nextTarget
}
#action {^You can't poke someone who's not here!} {
	hk $nextTarget
}

#action {^They aren't here.$} { hk $nextTarget } {9}

#action {You start searching for tracks but then realize your target is right here!} {
	$openingAttack $target;
	#var target $nextTarget
}


#action {Alas, you cannot go up...} {op vent u;u}

#action {^The %1 to the %2 seems to be closed.} {
	op %1 %2;
}
#action {^You open the %w to the %w.} {%2};

#action {The %1 above seems to be closed.} {
	op %1 up;
	up
}

#action {The %1 below seems to be closed.} {
	op %1 down;
	down
}

#action {The %1 to the %2 seems to be locked.} {un %1 %2;open %1 %2}



#action {A powerful wind flows through the tunnels, sweeping you along with it.} {hk $target}

#action {You are exhausted!} {checkLevelsLow}

#action {^You suddenly find your hand empty} {wield $primary_weapon}

#action {^You try to ride %1, but you fall on your butt} {
    stand;
    mount $mount;
    $openingAttack $target;
} {4};


#nop ------------------------------------------
#nop -- Functions
#nop ------------------------------------------

#function {percent}
{
	#math {result} {(${%1} / ${%1_MAX}) * 100.0};
	#format {result} {%d} {$result}
}

#nop ------------------------------------------
#nop -- Events
#nop ------------------------------------------

#event {VARIABLE UPDATE MSDP_OPPONENT_NUMBER} {
	diaLog msdp Updating opponent number;
	#if {$MSDP_OPPONENT_NUMBER>1} { #nop };
}

#event {VARIABLE UPDATE MSDP_STAMINA} {
	diaLog msdp Updating MSDP_STAMINA;
	#if {$MSDP_OPPONENT_NUMBER==0  && @percent($MSDP_STAMINA)<$STAMINA_thresholdLow} {
		doRegen
	}
}


setRegenMode mm
lowThresholds 65 0 25
upperThresholds 85 5 80

#class {hk} {close}

#EVENT {CLASS DESTROYED hk} {
    diaLog azone Untick doregen;
    #untick doregen;
    diaLog azone Untick checkLevelsHigh;
    #untick checkLevelsHigh;
}

#nop -- vim: syntax=tt
